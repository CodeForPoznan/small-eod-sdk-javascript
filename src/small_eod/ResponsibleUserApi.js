/**
 * Small_EOD
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: adam.dobrawy@siecobywatelska.pl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.2.3-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/UserRef'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/UserRef'));
  } else {
    // Browser globals (root is window)
    if (!root.SmallEodClient) {
      root.SmallEodClient = {};
    }
    root.SmallEodClient.ResponsibleUserApi = factory(root.SmallEodClient.ApiClient, root.SmallEodClient.Error, root.SmallEodClient.UserRef);
  }
}(this, function(ApiClient, Error, UserRef) {
  'use strict';

  /**
   * ResponsibleUser service.
   * @module small_eod/ResponsibleUserApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ResponsibleUserApi. 
   * @alias module:small_eod/ResponsibleUserApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a responsible user reference of case
     * @param {Number} caseId The id of the case to modify
     * @param {module:model/UserRef} userRef New responsible user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserRef} and HTTP response
     */
    this.createResponsibleUserWithHttpInfo = function(caseId, userRef) {
      var postBody = userRef;
      // verify the required parameter 'caseId' is set
      if (caseId === undefined || caseId === null) {
        throw new Error("Missing the required parameter 'caseId' when calling createResponsibleUser");
      }
      // verify the required parameter 'userRef' is set
      if (userRef === undefined || userRef === null) {
        throw new Error("Missing the required parameter 'userRef' when calling createResponsibleUser");
      }

      var pathParams = {
        'caseId': caseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sessionAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserRef;
      return this.apiClient.callApi(
        '/case/{caseId}/responsibleUser', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a responsible user reference of case
     * @param {Number} caseId The id of the case to modify
     * @param {module:model/UserRef} userRef New responsible user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserRef}
     */
    this.createResponsibleUser = function(caseId, userRef) {
      return this.createResponsibleUserWithHttpInfo(caseId, userRef)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a single responsible user based on the ID supplied
     * @param {Number} caseId The id of the case to modify
     * @param {Number} responsibleUserId The id of the responsible user to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteResponsibleUserWithHttpInfo = function(caseId, responsibleUserId) {
      var postBody = null;
      // verify the required parameter 'caseId' is set
      if (caseId === undefined || caseId === null) {
        throw new Error("Missing the required parameter 'caseId' when calling deleteResponsibleUser");
      }
      // verify the required parameter 'responsibleUserId' is set
      if (responsibleUserId === undefined || responsibleUserId === null) {
        throw new Error("Missing the required parameter 'responsibleUserId' when calling deleteResponsibleUser");
      }

      var pathParams = {
        'caseId': caseId,
        'responsibleUserId': responsibleUserId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sessionAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/case/{caseId}/responsibleUser/{responsibleUserId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a single responsible user based on the ID supplied
     * @param {Number} caseId The id of the case to modify
     * @param {Number} responsibleUserId The id of the responsible user to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteResponsibleUser = function(caseId, responsibleUserId) {
      return this.deleteResponsibleUserWithHttpInfo(caseId, responsibleUserId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Info for a specific responsible user of case
     * @param {Number} caseId The id of the case to retrieve
     * @param {Number} responsibleUserId The id of the responsible user to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserRef} and HTTP response
     */
    this.showcaseByIdWithHttpInfo = function(caseId, responsibleUserId) {
      var postBody = null;
      // verify the required parameter 'caseId' is set
      if (caseId === undefined || caseId === null) {
        throw new Error("Missing the required parameter 'caseId' when calling showcaseById");
      }
      // verify the required parameter 'responsibleUserId' is set
      if (responsibleUserId === undefined || responsibleUserId === null) {
        throw new Error("Missing the required parameter 'responsibleUserId' when calling showcaseById");
      }

      var pathParams = {
        'caseId': caseId,
        'responsibleUserId': responsibleUserId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sessionAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserRef;
      return this.apiClient.callApi(
        '/case/{caseId}/responsibleUser/{responsibleUserId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Info for a specific responsible user of case
     * @param {Number} caseId The id of the case to retrieve
     * @param {Number} responsibleUserId The id of the responsible user to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserRef}
     */
    this.showcaseById = function(caseId, responsibleUserId) {
      return this.showcaseByIdWithHttpInfo(caseId, responsibleUserId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
