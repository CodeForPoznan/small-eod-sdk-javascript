/**
 * Small_EOD
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: adam.dobrawy@siecobywatelska.pl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.2.3-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/ModelCase'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/ModelCase'));
  } else {
    // Browser globals (root is window)
    if (!root.SmallEod) {
      root.SmallEod = {};
    }
    root.SmallEod.CaseApi = factory(root.SmallEod.ApiClient, root.SmallEod.Error, root.SmallEod.ModelCase);
  }
}(this, function(ApiClient, Error, ModelCase) {
  'use strict';

  /**
   * Case service.
   * @module small_eod/CaseApi
   * @version 1.0.0
   */

  /**
   * Constructs a new CaseApi. 
   * @alias module:small_eod/CaseApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a case
     * @param {module:model/ModelCase} modelCase New case
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModelCase} and HTTP response
     */
    this.createCaseWithHttpInfo = function(modelCase) {
      var postBody = modelCase;
      // verify the required parameter 'modelCase' is set
      if (modelCase === undefined || modelCase === null) {
        throw new Error("Missing the required parameter 'modelCase' when calling createCase");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sessionAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModelCase;
      return this.apiClient.callApi(
        '/case', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a case
     * @param {module:model/ModelCase} modelCase New case
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModelCase}
     */
    this.createCase = function(modelCase) {
      return this.createCaseWithHttpInfo(modelCase)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a single case based on the ID supplied
     * @param {Number} caseId The id of the case to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCaseWithHttpInfo = function(caseId) {
      var postBody = null;
      // verify the required parameter 'caseId' is set
      if (caseId === undefined || caseId === null) {
        throw new Error("Missing the required parameter 'caseId' when calling deleteCase");
      }

      var pathParams = {
        'caseId': caseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sessionAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/case/{caseId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a single case based on the ID supplied
     * @param {Number} caseId The id of the case to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCase = function(caseId) {
      return this.deleteCaseWithHttpInfo(caseId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all cases
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 100)
     * @param {Number} opts.offset How many items skip in return
     * @param {Number} opts.institution Institution ID or NULL
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ModelCase>} and HTTP response
     */
    this.listCaseWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'institution': opts['institution'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sessionAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ModelCase];
      return this.apiClient.callApi(
        '/case', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all cases
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 100)
     * @param {Number} opts.offset How many items skip in return
     * @param {Number} opts.institution Institution ID or NULL
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ModelCase>}
     */
    this.listCase = function(opts) {
      return this.listCaseWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Info for a specific case
     * @param {Number} caseId The id of the case to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModelCase} and HTTP response
     */
    this.showCaseByIdWithHttpInfo = function(caseId) {
      var postBody = null;
      // verify the required parameter 'caseId' is set
      if (caseId === undefined || caseId === null) {
        throw new Error("Missing the required parameter 'caseId' when calling showCaseById");
      }

      var pathParams = {
        'caseId': caseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sessionAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ModelCase;
      return this.apiClient.callApi(
        '/case/{caseId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Info for a specific case
     * @param {Number} caseId The id of the case to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModelCase}
     */
    this.showCaseById = function(caseId) {
      return this.showCaseByIdWithHttpInfo(caseId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updated case
     * @param {Number} caseId The id of the case to modify
     * @param {module:model/ModelCase} modelCase Updated case
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModelCase} and HTTP response
     */
    this.updateCaseByIdWithHttpInfo = function(caseId, modelCase) {
      var postBody = modelCase;
      // verify the required parameter 'caseId' is set
      if (caseId === undefined || caseId === null) {
        throw new Error("Missing the required parameter 'caseId' when calling updateCaseById");
      }
      // verify the required parameter 'modelCase' is set
      if (modelCase === undefined || modelCase === null) {
        throw new Error("Missing the required parameter 'modelCase' when calling updateCaseById");
      }

      var pathParams = {
        'caseId': caseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sessionAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModelCase;
      return this.apiClient.callApi(
        '/case/{caseId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updated case
     * @param {Number} caseId The id of the case to modify
     * @param {module:model/ModelCase} modelCase Updated case
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModelCase}
     */
    this.updateCaseById = function(caseId, modelCase) {
      return this.updateCaseByIdWithHttpInfo(caseId, modelCase)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
