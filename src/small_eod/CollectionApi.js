/**
 * Small_EOD
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: adam.dobrawy@siecobywatelska.pl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.2.3-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Collection', 'model/Error', 'model/Event', 'model/Letter', 'model/ModelCase'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Collection'), require('../model/Error'), require('../model/Event'), require('../model/Letter'), require('../model/ModelCase'));
  } else {
    // Browser globals (root is window)
    if (!root.SmallEodClient) {
      root.SmallEodClient = {};
    }
    root.SmallEodClient.CollectionApi = factory(root.SmallEodClient.ApiClient, root.SmallEodClient.Collection, root.SmallEodClient.Error, root.SmallEodClient.Event, root.SmallEodClient.Letter, root.SmallEodClient.ModelCase);
  }
}(this, function(ApiClient, Collection, Error, Event, Letter, ModelCase) {
  'use strict';

  /**
   * Collection service.
   * @module small_eod/CollectionApi
   * @version 1.0.0
   */

  /**
   * Constructs a new CollectionApi. 
   * @alias module:small_eod/CollectionApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a collection
     * @param {module:model/Collection} collection New collection
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Collection} and HTTP response
     */
    this.createCollectionWithHttpInfo = function(collection) {
      var postBody = collection;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling createCollection");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sessionAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Collection;
      return this.apiClient.callApi(
        '/collection', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a collection
     * @param {module:model/Collection} collection New collection
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Collection}
     */
    this.createCollection = function(collection) {
      return this.createCollectionWithHttpInfo(collection)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a single collection based on the ID supplied
     * @param {Number} collectionId The id of the collection to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCollectionWithHttpInfo = function(collectionId) {
      var postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling deleteCollection");
      }

      var pathParams = {
        'collectionId': collectionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sessionAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/collection/{collectionId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a single collection based on the ID supplied
     * @param {Number} collectionId The id of the collection to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCollection = function(collectionId) {
      return this.deleteCollectionWithHttpInfo(collectionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all collections
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 100)
     * @param {Number} opts.offset How many items skip in return
     * @param {Number} opts._case Case ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Collection>} and HTTP response
     */
    this.listCollectionWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'case': opts['_case'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sessionAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Collection];
      return this.apiClient.callApi(
        '/collection', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all collections
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 100)
     * @param {Number} opts.offset How many items skip in return
     * @param {Number} opts._case Case ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Collection>}
     */
    this.listCollection = function(opts) {
      return this.listCollectionWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cases match query for a specific collection
     * @param {Number} collectionId The id of the collection to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModelCase} and HTTP response
     */
    this.showCaseByCollectionWithHttpInfo = function(collectionId) {
      var postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling showCaseByCollection");
      }

      var pathParams = {
        'collectionId': collectionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerAuth', 'sessionAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ModelCase;
      return this.apiClient.callApi(
        '/collection/{collectionId}/case', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cases match query for a specific collection
     * @param {Number} collectionId The id of the collection to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModelCase}
     */
    this.showCaseByCollection = function(collectionId) {
      return this.showCaseByCollectionWithHttpInfo(collectionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Info for a specific collection
     * @param {Number} collectionId The id of the collection to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Collection} and HTTP response
     */
    this.showCollectionByIdWithHttpInfo = function(collectionId) {
      var postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling showCollectionById");
      }

      var pathParams = {
        'collectionId': collectionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerAuth', 'sessionAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Collection;
      return this.apiClient.callApi(
        '/collection/{collectionId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Info for a specific collection
     * @param {Number} collectionId The id of the collection to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Collection}
     */
    this.showCollectionById = function(collectionId) {
      return this.showCollectionByIdWithHttpInfo(collectionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Events of case match query for a specific collection
     * @param {Number} collectionId The id of the collection to retrieve
     * @param {Number} caseId The id of the collection to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Event} and HTTP response
     */
    this.showEventCaseByCollectionWithHttpInfo = function(collectionId, caseId) {
      var postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling showEventCaseByCollection");
      }
      // verify the required parameter 'caseId' is set
      if (caseId === undefined || caseId === null) {
        throw new Error("Missing the required parameter 'caseId' when calling showEventCaseByCollection");
      }

      var pathParams = {
        'collectionId': collectionId,
        'caseId': caseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerAuth', 'sessionAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Event;
      return this.apiClient.callApi(
        '/collection/{collectionId}/case/{caseId}/event', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Events of case match query for a specific collection
     * @param {Number} collectionId The id of the collection to retrieve
     * @param {Number} caseId The id of the collection to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Event}
     */
    this.showEventCaseByCollection = function(collectionId, caseId) {
      return this.showEventCaseByCollectionWithHttpInfo(collectionId, caseId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Letters of cases match query for a specific collection
     * @param {Number} collectionId The id of the collection to retrieve
     * @param {Number} caseId The id of the collection to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Letter} and HTTP response
     */
    this.showLetterCaseByCollectionWithHttpInfo = function(collectionId, caseId) {
      var postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling showLetterCaseByCollection");
      }
      // verify the required parameter 'caseId' is set
      if (caseId === undefined || caseId === null) {
        throw new Error("Missing the required parameter 'caseId' when calling showLetterCaseByCollection");
      }

      var pathParams = {
        'collectionId': collectionId,
        'caseId': caseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerAuth', 'sessionAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Letter;
      return this.apiClient.callApi(
        '/collection/{collectionId}/case/{caseId}/letter', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Letters of cases match query for a specific collection
     * @param {Number} collectionId The id of the collection to retrieve
     * @param {Number} caseId The id of the collection to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Letter}
     */
    this.showLetterCaseByCollection = function(collectionId, caseId) {
      return this.showLetterCaseByCollectionWithHttpInfo(collectionId, caseId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Notes of case match query for a specific collection
     * @param {Number} collectionId The id of the collection to retrieve
     * @param {Number} caseId The id of the collection to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Letter} and HTTP response
     */
    this.showNoteCaseByCollectionWithHttpInfo = function(collectionId, caseId) {
      var postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling showNoteCaseByCollection");
      }
      // verify the required parameter 'caseId' is set
      if (caseId === undefined || caseId === null) {
        throw new Error("Missing the required parameter 'caseId' when calling showNoteCaseByCollection");
      }

      var pathParams = {
        'collectionId': collectionId,
        'caseId': caseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerAuth', 'sessionAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Letter;
      return this.apiClient.callApi(
        '/collection/{collectionId}/case/{caseId}/note', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Notes of case match query for a specific collection
     * @param {Number} collectionId The id of the collection to retrieve
     * @param {Number} caseId The id of the collection to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Letter}
     */
    this.showNoteCaseByCollection = function(collectionId, caseId) {
      return this.showNoteCaseByCollectionWithHttpInfo(collectionId, caseId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updated collection
     * @param {Number} collectionId The id of the collection to modify
     * @param {module:model/Collection} collection Updated collection
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Collection} and HTTP response
     */
    this.updateCollectionByIdWithHttpInfo = function(collectionId, collection) {
      var postBody = collection;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling updateCollectionById");
      }
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling updateCollectionById");
      }

      var pathParams = {
        'collectionId': collectionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sessionAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Collection;
      return this.apiClient.callApi(
        '/collection/{collectionId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updated collection
     * @param {Number} collectionId The id of the collection to modify
     * @param {module:model/Collection} collection Updated collection
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Collection}
     */
    this.updateCollectionById = function(collectionId, collection) {
      return this.updateCollectionByIdWithHttpInfo(collectionId, collection)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
