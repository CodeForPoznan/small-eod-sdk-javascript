/**
 * Small_EOD
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: adam.dobrawy@siecobywatelska.pl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.2.3-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/FileSigner', 'model/Letter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/FileSigner'), require('../model/Letter'));
  } else {
    // Browser globals (root is window)
    if (!root.SmallEod) {
      root.SmallEod = {};
    }
    root.SmallEod.FileApi = factory(root.SmallEod.ApiClient, root.SmallEod.Error, root.SmallEod.FileSigner, root.SmallEod.Letter);
  }
}(this, function(ApiClient, Error, FileSigner, Letter) {
  'use strict';

  /**
   * File service.
   * @module api/FileApi
   * @version 1.0.0
   */

  /**
   * Constructs a new FileApi. 
   * @alias module:api/FileApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a file
     * @param {Number} letterId The id of the letter to retrieve
     * @param {File} file New file
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    this.createFileWithHttpInfo = function(letterId, file) {
      var postBody = file;
      // verify the required parameter 'letterId' is set
      if (letterId === undefined || letterId === null) {
        throw new Error("Missing the required parameter 'letterId' when calling createFile");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling createFile");
      }

      var pathParams = {
        'letterId': letterId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sessionAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = File;
      return this.apiClient.callApi(
        '/letter/{letterId}/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a file
     * @param {Number} letterId The id of the letter to retrieve
     * @param {File} file New file
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    this.createFile = function(letterId, file) {
      return this.createFileWithHttpInfo(letterId, file)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a pre-signed URLs for file
     * @param {module:model/FileSigner} fileSigner New file signature request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileSigner} and HTTP response
     */
    this.createPreSignedUrlWithHttpInfo = function(fileSigner) {
      var postBody = fileSigner;
      // verify the required parameter 'fileSigner' is set
      if (fileSigner === undefined || fileSigner === null) {
        throw new Error("Missing the required parameter 'fileSigner' when calling createPreSignedUrl");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sessionAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileSigner;
      return this.apiClient.callApi(
        '/letter/file/sign', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a pre-signed URLs for file
     * @param {module:model/FileSigner} fileSigner New file signature request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileSigner}
     */
    this.createPreSignedUrl = function(fileSigner) {
      return this.createPreSignedUrlWithHttpInfo(fileSigner)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Info for a specific file
     * @param {Number} letterId The id of the letter of file
     * @param {Number} fileId The id of the file to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Letter} and HTTP response
     */
    this.showFileByLetterIdWithHttpInfo = function(letterId, fileId) {
      var postBody = null;
      // verify the required parameter 'letterId' is set
      if (letterId === undefined || letterId === null) {
        throw new Error("Missing the required parameter 'letterId' when calling showFileByLetterId");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling showFileByLetterId");
      }

      var pathParams = {
        'letterId': letterId,
        'fileId': fileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sessionAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Letter;
      return this.apiClient.callApi(
        '/letter/{letterId}/file/{fileId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Info for a specific file
     * @param {Number} letterId The id of the letter of file
     * @param {Number} fileId The id of the file to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Letter}
     */
    this.showFileByLetterId = function(letterId, fileId) {
      return this.showFileByLetterIdWithHttpInfo(letterId, fileId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
